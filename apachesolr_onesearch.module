<?php

/*
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE
 */
function apachesolr_onesearch_apachesolr_index_document_build_user($document, $entity) {
  try {
    # Add profile picture uri when indexing users
    $my_user = entity_metadata_wrapper('user', $entity);
    $pic_uri = file_create_url( $my_user->value()->picture->uri);
    if("" != $pic_uri) {
      $document->addField('ss_picture', $pic_uri);
    }
  }
  catch (EntityMetadataWrapperException $e) {
    watchdog(
      'apachesolr_onesearch',
      'EntityMetadataWrapper exception in %function() <pre>@trace</pre>',
      array('%function' => __FUNCTION__, '@trace' => $e->getTraceAsString()),
      WATCHDOG_ERROR
    );
  }
}

/*
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE
 */
function apachesolr_onesearch_apachesolr_index_document_build_node($document, $entity) {
  try {

    $w = entity_metadata_wrapper('node', $entity);
    $bundle = $w->getBundle();
    switch($bundle){
      case "eresources":
        if(! $w->field_description) { break; }
        $my_desc = $w->field_description->value();
        if( empty( $my_desc)) { break; }
        $document->addField('ss_field_description', $my_desc["value"] );
    }
  }
  catch (EntityMetadataWrapperException $e) {
    watchdog(
      'apachesolr_onesearch',
      'EntityMetadataWrapper exception in %function() <pre>@trace</pre>',
      array('%function' => __FUNCTION__, '@trace' => $e->getTraceAsString()),
      WATCHDOG_ERROR
    );
  }
}

/*
 * Implements hook_apachesolr_ENTITY_TYPE_exclude
 */
function apachesolr_onesearch_apachesolr_user_exclude($entity_id,  $row, $env_id) {
  try {
    # Filter out users that don't have a title
    $my_user = entity_metadata_wrapper('user', $entity_id);
    $searchable = $my_user->field_searchable->value() ;
    $exclude = ! isset($searchable);
    return $exclude;
  }
  catch (EntityMetadataWrapperException $e) {
    watchdog(
      'apachesolr_onesearch',
      'EntityMetadataWrapper exception in %function() <pre>@trace</pre>',
      array('%function' => __FUNCTION__, '@trace' => $e->getTraceAsString()),
      WATCHDOG_ERROR
    );
  }
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function apachesolr_onesearch_block_info(){
    $blocks = array();
    $blocks['onesearch_search'] = array(
        'info' => t('One Search'),
    );
    return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function apachesolr_onesearch_block_view($delta=''){
    switch ($delta) {
      case 'onesearch_search':
        $variables = array(
          "formurl" => variable_get('apachesolr_onesearch_formurl', "")
        );
        $block = array();
        $block['subject'] = "Discover!";
        $block['content'] = theme('onesearch_search', $variables);
        break;
    }
    return $block;
}

/**
 * Implementation of hook_theme
 */
function apachesolr_onesearch_theme() {
  return array(
    'onesearch_search' => array(
      'template' => 'templates/onesearch-search',
      'variables' => array(),
    ),
  );
}

/**
 * Implementation of hook_menu
 */
function apachesolr_onesearch_menu(){

  /* proxy settings */
  $items['admin/config/search/onesearch_search']
    = array(
    'title' => 'One Search search block settings',
    'description' => 'Configure the One Search search block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_onesearch_settings'),
    'access arguments' => array('administer search'),
  );

  return $items;
}

/**
 * Callback to define define settings form.
 */
function apachesolr_onesearch_settings() {

  $form = array();

  $form['apachesolr_onesearch_formurl'] = array(
    '#type' => 'textfield',
    '#title' => t('One Search Form Url'),
    '#default_value' => variable_get('apachesolr_onesearch_formurl', "https://search.libraries.ou.edu"),
    '#description' => t("The URI for One Search"),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_theme_registry_alter().
 */
function apachesolr_onesearch_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'apachesolr_onesearch');

  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path.'/templates');

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}
